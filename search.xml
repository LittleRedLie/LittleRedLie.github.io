<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DjangoCache]]></title>
    <url>%2F2020%2F05%2F26%2FDjangoCache%2F</url>
    <content type="text"><![CDATA[缓存框架的核心目标 较少的代码 缓存应该尽可能快 因此围绕缓存后端的所有框架代码应该保持在绝对最小值，特别是对于获取操作 一致性 缓存API应该是提供跨越不同缓存后端的一致接口 可扩展性 基于开发人员的需求，缓存API应该可以在应用程序级别扩展 缓存 django内置了缓存框架，并提供了几种常用的缓存 基于Memcached缓存 使用数据库进行缓存 使用文件系统进行缓存 使用本地内存进行缓存 提供缓存扩展接口 缓存配置 创建缓存表 1python manage.py createcachetable [table_name] 缓存配置 123456789101112CACHES = &#123; &apos;default&apos;: &#123; &apos;BACKEND&apos;: &apos;django.core.cache.backends.db.DatabaseCache&apos;, &apos;LOCATION&apos;: &apos;my_cache_table&apos;, &apos;TIMEOUT&apos;: &apos;60&apos;, &apos;OPTIONS&apos;: &#123; &apos;MAX_ENTRIES&apos;: &apos;300&apos;, &#125;, &apos;KEY_PREFIX&apos;: &apos;rock&apos;, &apos;VERSION&apos;: &apos;1&apos;, &#125;&#125; 缓存使用 在视图中使用（使用最多的场景） @cache_page() time 秒 60*5 缓存五分钟 cache 缓存配置, 默认default， key_prefix 前置字符串 缓存底层 获取cache 12from django.core.cache import cachescache = caches['cache_name'] 设置cache 12from django.core.cache import cachecache.set('cache_name', 'cache_value', timeout=60) 缓存操作 cache.set key value timeout get add get_or _set get_many set_many delete delete_many clear incr 增加 incr(key, value) key对应的值上添加 value decr 减少 decr(key, value) key对应的值上减少value 如果value不写，默认变更为1 使用Redis做缓存 常见的有两个实现 django-redis http://django-redis-chs.readthedocs.io/zh_CN/latest/#django django-redis-cache ·https://pypi.python.org/pypi/django-redis-cache/ 配置和内置的缓存配置基本一致 123456789CACHES = &#123; "default": &#123; "BACKEND": "django_redis.cache.RedisCache", "LOCATION": "redis://127.0.0.1:6379/1", "OPTIONS": &#123; "CLIENT_CLASS": "django_redis.client.DefaultClient", &#125; &#125;&#125; 用法和内置缓存使用一样]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-文件上传]]></title>
    <url>%2F2020%2F05%2F26%2FDjango-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[Modelmodels.py 12345class UserModel(models.Model): u_name = models.CharField(max_length=16) # upload_to相对路径，相对于的是MEDIA_ROOT 媒体根目录 u_icon = models.ImageField(upload_to='%Y/%m/%d/icons') Viewviews.py 12345678910111213141516171819def upload(request): if request.method == 'GET': return render(request, 'upload.html') elif request.method == 'POST': # 文件上传，通过数据库存储文件路径 username = request.POST.get('username') icon = request.FILES.get('icon') user = UserModel() user.u_name = username user.u_icon = icon user.save() # 文件上传（原生） # with open('D:\MyDjango\DjangoModel2\static\icon.jpg', 'wb') as save_file: # for part in icon.chunks(): # save_file.write(part) # save_file.flush() return HttpResponse("文件上传成功 %d" % user.id)]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-富文本]]></title>
    <url>%2F2020%2F05%2F26%2FDjango-%E5%AF%8C%E6%96%87%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Django富文本本文 使用 django-ckeditor （个人UI界面比较好看） 安装插件 1pip install django-ckeditor -i https://mirrors.aliyun.com/pypi/simple 在Django项目中注册插件 1、修改settings.py 12345678910111213INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'App', # 注册ckeditor 'ckeditor', # 'ckeditor_uploader',] 2、在 models.py 创建模型 12345from ckeditor.fields import RichTextFieldfrom django.db import modelsclass Blog(models.Model): text = RichTextField() 3、进行数据迁移 12python manage.py makemigrationspython manage.py migrate 在HTML使用django-ckeditor 123456789101112&#123;# 在head添加 #&#125;&#123;% load static %&#125;&lt;script type="text/javascript" src="&#123;% static "ckeditor/ckeditor/ckeditor.js" %&#125;"&gt;&lt;/script&gt;&#123;# 富文本使用 #&#125;&lt;form action="#" method="post"&gt; &#123;% csrf_token %&#125; &lt;textarea name="editor1"&gt;&lt;/textarea&gt; &lt;script&gt; CKEDITOR.replace( 'editor1' , &#123;height: 600, width: 1000, toolbar: 'Custom'&#125;); &lt;/script&gt;&lt;/form&gt;]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-Models模块]]></title>
    <url>%2F2020%2F05%2F26%2FDjango-Models%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[过滤器 all() 返回所有数据 filter() 返回符合条件的数据 exclude() 过滤掉符合条件的数据 order_by() 排序 values() 一条数据就是一个字典，返回一个列表 first() 返回查询集中的第一个对象 last() 返回查询集中的最后一个对象 隐藏bug：可能会出现 first() 和 last() 返回相同对象（解决办法：手动写排序规则） count() 返回当前查询集的对象个数 exists() 判断当前查询集是否有对象 get() 返回一个满足条件的对象 如果没有找到符合条件的对象，会抛出 模型类.DoesNotExist 异常 如果找到多个符合条件的对象，会抛出 模型类.MultiObjectsReturned 异常 数据集切片 QuerySet[0:15] 获取第0条到第14条数据 相当于SQL中的 limit 和 offset 和python中的切片不太一样，不能用负数 查询条件 表达式：属性名__运算符 = 值 运算符 gt 大于 lt 小于 gte 大于等于 lte 小于等于 in 在某一个集合中 contains 类似于 模糊查询 like startswith 以xx开始 本质是like endswith 以xx结束，也是like exact 精确搜索 类似等于 前面运算符同时添加 i （ignore 忽略） iexact icontains istartswith iendswith 解决 django 中查询条件存在的时区问题 关闭django中自定义的时区 在数据库中创建对应的时区表 python方法 对象方法 可以调用对象属性，也可以调用类的属性 类方法 不能调用对象属性，只能调用类的属性 静态方法 不能调用对象属性，也不能调用类的属性 只是寄生在类上而已 F 对象 可以获取我们属性的值 可以实现一个模型的不同属性之间的运算操作 支持算术运算 Q 对象 可以对查询条件进行封装 支持逻辑运算 与 &amp; and 或 | or 非 ~ not 字段约束 max_length default unique index primary_key db_column 模型成员 显性属性 开发者手动声明的属性 隐性属性 开发者没有声明，父类中也不存在，动态产生出来的 如果开发者主动声明这些属性，隐性属性就不会自动生成 重要数据处理（软删除，逻辑删除） 模型类中创建逻辑字段 is_delete 自定义Manager类实现统一封装 重写get_queryset 模型关系 1 : 1 应用场景 用于复杂表的拆分 扩展新功能 Django 中 使用 OneToOneField() 声明 使用时，关系声明位置有细微差别 实现原理 通过外键实现的 且对外键添加唯一约束 数据删除 级联表 主表（被动声明关系的是主表） 从表（主动声明关系的是从表） on_delete CASECADE 从表数据删除，主表不受影响 主表数据删除，从表的级联数据也会删除 PROTECT 开发中为了防止误删除，我们通常设置此模式 主表如果存在级联数据，主表的删除操作会受到保护，不能删除 主表不存在级联数据，主表的删除操作可以成功 SET SET_NULL 使用前提，字段允许为NULL 删除时，会将该字段设为NULL SET_DEFAULT 使用前提，字段有设置默认值 删除时，会将该字段设为默认值 SET() 删除时，会将该字段设为指定值 级联数据获取 主获取从 隐性属性 默认是级联模型的名字（类名） 从获取主 显性属性 默认是属性名字（字段名） 1 : M Django 中 使用 ForeignKey() 声明 数据获取 主获取从 隐性属性 级联模型_set model_set 继承自 Manager 可进行 all()，filter()，exclude() 等操作 从获取主 显性属性 属性名字（字段名） M : N 关系比较复杂 开发中很少直接使用多对多关系，而是自己维护多对多的关系 Django 中 使用 ManyToManyField() 声明 产生关联表的时候会产生单独的关系表 关系表中存储关联表的主键，通过多个外键实现 对外键进行约束 多个外键值不能同时相等（FK1，FK2） 级联数据操作 add() remove() clear() set() 级联数据获取 级联模型_set model_set 继承自 Manager 可进行 all()，filter()，exclude() 等操作 模型继承 Django支持模型继承 需要在父类中使用元信息将父类抽象化 1234567891011class Father(models.Model): name = models.CharField(max_length=16) # 抽象 class META: abstract = True class Son1(Father): sex = models.BooleanField(default=False) class Son2(Father): adult = models.BooleanField(default=False)]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django-简单配置]]></title>
    <url>%2F2020%2F05%2F26%2FDjango-%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Django常用命令 12345678# 创建一个Django项目django-admin startproject MyDjango# 创建一个工程(进入项目目录)python manage.py startapp App# 启动服务python manage.py runserver 模版配置（templates） 在App中进行模版配置 只需在App的根目录创建 templates 文件夹即可 如果想让代码自动提示，应将 templates 文件夹进行标记（Mark Directory） 在项目目录中进行模版配置 需要在项目根目录中创建 templates 文件夹并进行标记 需要在项目 settings 配置文件的 TEMPLATES 中 DIR 进行注册 在项目开发中一般使用的原因：模版可以继承，复用 路由优化配置（urls） 项目如果逻辑过于复杂，可以拆分成多个App App中进行路由拆分 在App中创建自己的 urls 编写子路由规则列表（urlpatterns） 在根 urls 中进行子路由的包含（include） 子路由使用 根路由规则 + 子路由规则 模型（models） 使用了ORM技术（Object Relational Mapping 对象关系映射） 将业务逻辑进行了一个解耦合 object.save() object.delete() 关系型数据库 DDL（数据描述语言） 通过models定义实现 数据库表的定义 数据操作（增删查改） 存储 object.save() 查询 查询全部 object.all() 条件查询 object.get(pk=xx) 更新 基于查询操作 查好的对象，修改属性，然后 save() 进行基于主键值的更新 删除 基于查询操作 调用 delete() 连接mysql驱动 mysqlclient python 2, 3 都能直接使用 缺点：对 mysql 安装有要求，必须在指定位置存在配置文件 python-mysql python2 支持很好 python3 不支持 pymysql python 2, 3 都支持 可以伪装成 mysqlclient 或 python-mysql pycharm快捷键 ctrl + p 查看函数参数定义 shift + F6 重命名 重构 ctrl + DEL]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pip源切换国内镜像]]></title>
    <url>%2F2020%2F05%2F26%2Fpip%E6%BA%90%E5%88%87%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[pip 源切换国内镜像常见国内镜像 12345https://pypi.tuna.tsinghua.edu.cn/simple/ # 清华大学https://mirrors.aliyun.com/pypi/simple/ # 阿里云https://pypi.douban.com/simple/ # 豆瓣https://pypi.mirrors.ustc.edu.cn/simple/ # 中国科学技术大学https://pypi.hustunique.com/ # 华中科技大学 使用方法 临时使用 12# 通过清华镜像 安装 virtualenvpip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ virtualenv 永久使用 在用户的根目录下创建 .pip 文件夹，新建 pip.conf 文件，在文件中写入要使用的镜像 12345# 使用清华镜像[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = https://pypi.tuna.tsinghua.edu.cn python 虚拟环境 virtualenv安装 123456pip install virtualenvpip install virtualenvwrapper # virtualenvwrapper是virtualenv的拓展包# 若安装失败，尝试使用国内镜像pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ virtualenv pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ virtualenvwrapper 配置环境变量 1234export WORKON_HOME=~/Envs #设置环境变量mkdir -p $WORKON_HOME #创建虚拟环境管理目录find / -name virtualenvwrapper.sh #找到virtualenvwrapper.sh的路径source 路径 #激活virtualenvwrapper.sh ​ 默认virtualenvwrapper安装在下面python解释器中的site-packages，实际上需要运行virtualenvwrapper.sh文件才行；所以需要先进行配置一下： 找到virtualenvwrapper.sh的路径：find / -name virtualenvwrapper.sh 运行virtualenvwrapper.sh文件：source 路径 ps：每次要想使用virtualenvwrapper 工具时，都必须先激活virtualenvwrapper.sh,另外，如果创建前要将即将的环境保存到Envs中，就要先设置一下环境变量：export WORKON_HOME=~/Envs，再搭建 基本使用 1234567891011121314151617181920212223# 创建一个虚拟环境mkvirtualenv --python=python3.6 project_env# 指定虚拟环境工作workon project_env# 退出虚拟环境deactivate# 删除虚拟环境rmvirtualenv project_env# 列举所有的环境lsvirtualenv# 导航到当前激活的虚拟环境的目录中，比如说这样您就能够浏览它的 site-packagescdvirtualenv# 和上面的类似，但是是直接进入到 site-packages 目录中cdsitepackages# 显示 site-packages 目录中的内容lssitepackages]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++备忘录(持续更新)]]></title>
    <url>%2F2019%2F09%2F01%2FC-%E5%A4%87%E5%BF%98%E5%BD%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[类（class）和结构体（strut）的区别类（class）：默认访问权限为private 结构体（strut）：类的一种特殊情况，默认访问权限为public 函数设置参数默认值的注意点12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;void fun(int a = 12, char c = 'a') //全部指定默认值&#123; cout &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; c &lt;&lt; endl;&#125;void fun2(int a, int b = 2, char c = 'a') //部分指定默认值，必须 从右向左 连续 指定&#123; cout &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; c &lt;&lt; endl;&#125;void fun3(int a = 1); //声明函数原型要在这里赋默认值，下面不用再赋默认值int main()&#123; fun(); fun2(1); fun3(); return 0;&#125;void fun3(int a)&#123; cout &lt;&lt; a &lt;&lt; endl;&#125; 函数重载 与 函数设置参数默认值 同时使用时，容易造成函数调用不明确。 malloc(free) 和 new(delete) 的区别malloc：申请对象空间，不会触发对象的构造函数 new：申请对象空间，会触发对象的构造函数 free：释放对象空间，不会触发对象的析构函数 delete：释放对象空间，会触发对象的析构函数 const关键字 const 类成员初始化 （a）成员只有 const, 类似引用, 需要在 初始化列表 进行初始化(特殊情况C+11特性, 如果是整数(char, short, int), 可以直接在声明处赋值)。 （b）成员既有 const 又有 static, 按照 static 初始化方式。（静态成员如果是整数(char, short, int), 可以直接在声明处赋值，或者在定义处初始化） const 重载 （a）类的成员函数后面加 const，表明这个函数不会对这个类对象的数据成员（准确地说是非静态数据成员）作任何改变。 ​ 在设计类的时候，一个原则就是对于不改变数据成员的成员函数都要在后面加 const，而对于改变数据成员的成员函数不能加 const。所以 const 关键字对成员函数的行为作了更加明确的限定：有 const 修饰的成员函数（指 const 放在函数参数表的后面，而不是在函数前面或者参数表内），只能读取数据成员，不能改变数据成员；没有 const 修饰的成员函数，对数据成员则是可读可写的。 （b）类中函数只有 const 属性不同，可以进行函数重载。 ​ 我们知道，可以通过指针或者引用的 const 形参进行函数重载。类的const 成员函数重载也是一样的，const 修饰的是 this 指针。 const 类对象 ​ const 类对象只能访问 const 成员 const 函数改变成员变量 ​ 可以使用 mutable 修饰类成员变量，这样在 const 函数的内部可以改变成员变量。 const 返回值 ​ 对返回值使用const有可能提高一个函数的安全性和效率，否则还会出问题。 static 关键字 static成员变量必须在类声明的外部进行初始化。（静态常量整型数据成员可以直接在类声明时，进行初始化） static成员变量和普通static变量一样，都在内存分区的全局数据区分配内存，到程序结束后释放。这就意味着，static 成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。 构造函数与析构函数拷贝构造函数 拷贝构造函数的声明和调用情况 1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;using namespace std;class CTest &#123;public: CTest() &#123; cout &lt;&lt; "构造函数" &lt;&lt; endl; &#125; CTest(const CTest&amp; ct) //拷贝构造函数声明 &#123; cout &lt;&lt; "拷贝构造函数" &lt;&lt; endl; &#125;&#125;;CTest fun()&#123; CTest test; //调用构造函数 return test; //返回时生成临时对象，调用拷贝构造函数。（相当于 CTest temp = CTest(test);）&#125;int main()&#123; CTest test1; //调用构造函数 CTest test2(test1); //调用拷贝构造函数 CTest test3 = test1; //调用拷贝构造函数 CTest test4 = CTest(test1); //调用拷贝构造函数 CTest* test5 = new CTest(test1); //调用拷贝构造函数 fun(); //函数返回值生成临时对象过程中，调用拷贝构造函数 return 0;&#125; 浅拷贝与深拷贝 当出现类的等号赋值时，会调用拷贝函数，在未定义显示拷贝构造函数的情况下，系统会调用默认的拷贝函数——即浅拷贝，它能够完成成员的一一复制。当数据成员中没有指针时，浅拷贝是可行的。但当数据成员中有指针时，如果采用简单的浅拷贝，则两类中的两个指针将指向同一个地址，当对象快结束时，会调用两次析构函数，而导致指针悬挂现象。所以，这时，必须采用深拷贝。 浅拷贝出现的问题： 1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;using namespace std;class CStu&#123;public: int* a; CStu() &#123; a = new int[2]; a[0] = 12; a[1] = 13; &#125; ~CStu() &#123; delete[] a; &#125;&#125;;int main()&#123; CStu stu; cout &lt;&lt; stu.a[0] &lt;&lt; " " &lt;&lt; stu.a[1] &lt;&lt; endl; CStu stu2 = stu; cout &lt;&lt; stu2.a[0] &lt;&lt; " " &lt;&lt; stu2.a[1] &lt;&lt; endl; return 0;&#125; //多次释放同一块空间 深拷贝解决问题： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;using namespace std;class CStu&#123;public: int* a; CStu() &#123; a = new int[2]; a[0] = 12; a[1] = 13; &#125; //深拷贝 CStu(const CStu&amp; stu) &#123; //申请指针空间 this-&gt;a = new int[2]; //this-&gt;a[0] = stu.a[0]; //this-&gt;a[1] = stu.a[1]; memcpy(this-&gt;a,stu.a,2*sizeof(int)); &#125; ~CStu() &#123; delete[] a; &#125;&#125;;int main()&#123; CStu stu; cout &lt;&lt; stu.a[0] &lt;&lt; " " &lt;&lt; stu.a[1] &lt;&lt; endl; CStu stu2 = stu; cout &lt;&lt; stu2.a[0] &lt;&lt; " " &lt;&lt; stu2.a[1] &lt;&lt; endl; return 0;&#125; 深拷贝与浅拷贝的区别就在于深拷贝会在堆内存中另外申请空间来储存数据，从而也就解决了指针悬挂的问题。简而言之，当数据成员中有指针时，必须要用深拷贝。 一个类中可以存在多于一个的拷贝构造函数吗? 答：类中可以存在超过一个拷贝构造函数。 12345class X &#123; public: X(const X&amp; a); // const 的拷贝构造 X(X&amp; a); // 非const的拷贝构造 &#125;; 常规函数与内联函数内联函数：空间换时间。函数代码少，流程直接，调用频繁，可以使用内联函数。内联函数不能递归。类内定义的函数都是内联函数。 常规函数：时间换空间。函数代码多，多层嵌套循环，建议使用常规函数。 单例模式123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;using namespace std;class CFather&#123;private: //1. 将构造函数访问权限设为 private，使类外不能直接实例化对象 CFather() &#123; &#125;public: //2. 定义一个静态标记，记录是否已经创建对象，类外进行初始化 static int Cflag; //3. 定义一个静态函数，通过静态函数申请对象空间，并返回地址 static CFather* CreateOJ() &#123; if (Cflag == 0) &#123; Cflag = 1; return (new CFather); &#125; else &#123; return NULL; &#125; &#125; //4. 定义析构函数将标记清空，以达到重复申请对象目的 ~CFather() &#123; Cflag = 0; &#125;&#125;;int CFather::Cflag = 0;int main()&#123; CFather* f = CFather::CreateOJ(); delete f; CFather* f1 = CFather::CreateOJ(); delete f1; return 0;&#125; 指针、引用、指针引用、二级指针区别传递指针时，只可以改变指针所指的内容，不可以改变指针本身（引用同理） 传递指针引用时，既可以改变指针所指的内容，又可以改变指针本身（二级指针同理） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;using namespace std;void fun1(int *a)&#123; *a = 1;// 传指针时，不能改变函数外原指针所指地址 &#125;void fun2(int &amp;a)&#123; a = 2;// 引用只能初始化一次，后续不能改变引用所指空间&#125;void fun3(int **a)&#123; **a = 3; *a = new int(33); // 二级指针即可以改变所指一级指针所指的内容，又可以改变所指一级指针的地址。指针传递的本质是值传递。 &#125;void fun4(int *&amp;a)&#123; *a = 4; a = new int(44); // 指针引用既可以改变指针所指的内容，又可以改变指针所指的地址。优点：比二级指针省空间，安全 &#125;int main()&#123; int a=0; int *b; b = &amp;a; fun1(b); cout&lt;&lt;"fun1(): "&lt;&lt;a&lt;&lt;" "&lt;&lt;*b&lt;&lt;endl; int &amp;c = a; fun2(c); cout&lt;&lt;"fun2(): "&lt;&lt;a&lt;&lt;" "&lt;&lt;c&lt;&lt;endl; int **d; //二级指针定义 d = &amp;b; fun3(d); cout&lt;&lt;"fun3(): "&lt;&lt;a&lt;&lt;" "&lt;&lt;*b&lt;&lt;" "&lt;&lt;**d&lt;&lt;endl; b = &amp;a; fun4(b); //指针引用 ，只用传一级指针就行了 cout&lt;&lt;"fun4(): "&lt;&lt;a&lt;&lt;" "&lt;&lt;*b&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速排序算法和归并排序算法]]></title>
    <url>%2F2019%2F07%2F02%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[原理参考链接： https://www.cnblogs.com/seniusen/p/9810080.html http://wiki.jikexueyuan.com/project/easy-learn-algorithm/fast-sort.html 源码（c++）快速排序算法12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;iostream&gt;using namespace std;template&lt;class T&gt;void QuickSort(T *a, const int left, const int right)&#123; if(left&lt;right)&#123; //选枢轴划分 int i = left; int j = right; int pivot = a[left]; while(i&lt;j)&#123; //顺序很重要，要先从右边开始找(因为左边是枢纽) 后面有解释 while(i&lt;j &amp;&amp; a[j]&gt;=pivot)&#123; j--; &#125; while(i&lt;j &amp;&amp; a[i]&lt;=pivot)&#123; i++; &#125; if(i&lt;j)&#123; swap(a[i],a[j]); &#125; &#125; swap(a[left],a[j]); QuickSort(a,left,j-1); QuickSort(a,j+1,right); &#125; &#125;int main()&#123; int a[]=&#123;4,5,1,9,7,6,2,3,8,0&#125;; //int a[]=&#123;1,3,5,0,9,4,2,8,7,6&#125;; QuickSort(a,0,9); for(int i=0; i&lt;10; i++)&#123; cout&lt;&lt;a[i]&lt;&lt;endl; &#125; return 0;&#125; 归并排序算法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;template&lt;class T&gt;void merge(T *list, T *mergeList, const int left, const int mid, const int right)&#123; int i = left; int j = mid+1; int k = 0; while(i &lt;= mid &amp;&amp; j &lt;= right) &#123; if(list[i] &lt;= list[j]) &#123; mergeList[k] = list[i]; i++; k++; &#125; else &#123; mergeList[k] = list[j]; j++; k++; &#125; &#125; while(i &lt;= mid) &#123; mergeList[k] = list[i]; i++; k++; &#125; while(j &lt;= right) &#123; mergeList[k] = list[j]; j++; k++; &#125; for(int m=0; m&lt;k; m++) &#123; list[left + m] = mergeList[m]; &#125;&#125;template&lt;class T&gt;void mergeSort(T *list, T *mergeList, const int left, const int right)&#123; if(left &lt; right) &#123; int mid = (left + right) / 2; mergeSort(list, mergeList, left, mid); mergeSort(list, mergeList, mid+1, right); merge(list, mergeList, left, mid, right); &#125;&#125;int main()&#123; int a[] = &#123;23,47,81,95,7,14,39,55,62,74&#125;; int b[10] = &#123;0&#125;; mergeSort(a, b, 0, 9); for(int i=0; i&lt;10; i++) &#123; cout&lt;&lt;a[i]&lt;&lt;" "; &#125; return 0;&#125; 注意点快速排序算法中，为什么一定要从基数（枢纽）对面先开始？ 假设对如下进行排序： 如上图，6在左，9在右 假设：我们将6作为基数 从左边开始（与正确程序执行顺序正好相反） 123456while(i&lt;j &amp;&amp; a[i]&lt;=pivot)&#123; i++;&#125;while(i&lt;j &amp;&amp; a[j]&gt;=pivot)&#123; j--;&#125; //错误顺序 按照这个代码逻辑，走一遍，i会移动到 数字7 停下来 (此时因为 a[i]&gt;pivot，循环退出)，而接着 j 会也会移动到 数字7 停下来 （此时因为 i==j ，循环退出），然后执行 基数6 与 a[j] 的交换 交换后数组：｛7，1，2，6，9｝ 此时明显与快速排序算法的核心思想不一致 问题在于当我们先从在边开始时，那么 i 所停留的那个位置肯定是大于基数6的 而在上述例子中，为了满足 i&lt;j 于是 j也停留在7的位置，但最后交换回去的时候，7就到了左边 所以，我们必须从基准数的对面开始]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python2与python3的一些区别]]></title>
    <url>%2F2019%2F04%2F02%2Fpython2%E4%B8%8Epython3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[数据类型之间的区别整数在Python 2.x版本中整数分为一般整数和长整数。 12345678&gt;&gt;&gt; 2**312147483648L&gt;&gt;&gt; 2**301073741824&gt;&gt;&gt; 2**30-1+2**302147483647&gt;&gt;&gt; 2**31-12147483647L 这个是在Python 2.7.13版本的结果。每个版本会有一些不同。在这个版本中一般整数是32bit的（符号位占1bit）。当超过32bit，会在后面加L。一些版本有可能是64bit，这个看具体的版本。 但是在Python 3.x就没有这种区分，整数只有一个类型。 1234&gt;&gt;&gt; 2**312147483648&gt;&gt;&gt; 2**639223372036854775808 这个是在Python 3.6.2版本的结果，可以证实Python 3.x的整数跟Python 2.x是有区别的 函数之间的区别round()round()之四舍五入 Python2.x 1234&gt;&gt;&gt; round(2.5)3.0&gt;&gt;&gt; round(3.5)4.0 可以看出python2.x版本的结果跟我们的预想的一样，函数的返回结果还是浮点数 Python3.x 1234&gt;&gt;&gt; round(2.5)2&gt;&gt;&gt; round(3.5)4 从结果上看，在python3.x中，这个函数是有变化的，函数的返回结果变成是整数，而且当要舍弃的数值正好为5（中间）时，会取接近的偶数值。例如： 1234&gt;&gt;&gt; round(2.5)2&gt;&gt;&gt; round(4.5)4 len() Python2.x 1234567&gt;&gt;&gt; len('中文')4&gt;&gt;&gt; len(u'中文')2&gt;&gt;&gt; a='中文'&gt;&gt;&gt; a'\xd6\xd0\xce\xc4' Python3.x 12345&gt;&gt;&gt; len('中文')2&gt;&gt;&gt; a='中文'&gt;&gt;&gt; a'中文' 从结果可以看出，len()的结果跟字符串默认编码有关。 在Python 3.x里默认是使用Unicode方式存储字符串。在Python 2.x里默认是使用Latin-1方式存储字符串，因此不能直接识别中文。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Anaconda简单使用方法]]></title>
    <url>%2F2019%2F04%2F02%2FAnaconda%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[环境管理创建新环境1$ conda create --name &lt;env_name&gt; &lt;package_names&gt; 注意： &lt;env_name&gt;即创建的环境名。建议以英文命名，且不加空格，名称两边不加尖括号“&lt;&gt;”。 &lt;package_names&gt;即安装在环境中的包名。名称两边不加尖括号“&lt;&gt;”。 如果要安装指定的版本号，则只需要在包名后面以=和版本号的形式执行。如：conda create --name python2 python=2.7，即创建一个名为“python2”的环境，环境中安装版本为2.7的python。 如果要在新创建的环境中创建多个包，则直接在&lt;package_names&gt;后以空格隔开，添加多个包名即可。如：conda create -n python3 python=3.5 numpy pandas，即创建一个名为“python3”的环境，环境中安装版本为3.5的python，同时也安装了numpy和pandas。 --name同样可以替换为-n。 提示：默认情况下，新创建的环境将会被保存在/Users/&lt;user_name&gt;/anaconda3/env目录下，其中，&lt;user_name&gt;为当前用户的用户名。 切换环境Linux 或 macOS 1$ source activate &lt;env_name&gt; Windows 1$ activate &lt;env_name&gt; 提示 如果创建环境后安装Python时没有指定Python的版本，那么将会安装与Anaconda版本相同的Python版本，即如果安装Anaconda第2版，则会自动安装Python 2.x；如果安装Anaconda第3版，则会自动安装Python 3.x。 当成功切换环境之后，在该行行首将以“(env_name)”或“[env_name]”开头。其中，“env_name”为切换到的环境名。如：在macOS系统中执行source active python2，即切换至名为“python2”的环境，则行首将会以(python2)开头。 退出环境至rootLinux 或 macOS 1$ source deactivate Windows 1$ deactivate 提示 当执行退出当前环境，回到root环境命令后，原本行首以“(env_name)”或“[env_name]”开头的字符将不再显示。 显示已创建环境1$ conda info --envs 或 1$ conda info -e 或 1$ conda env list 复制环境1$ conda create --name &lt;new_env_name&gt; --close &lt;copied_env_name&gt; 注意： &lt;copied_env_name&gt;即为被复制/克隆环境名。环境名两边不加尖括号“&lt;&gt;”。 &lt;new_env_name&gt;即为复制之后新环境的名称。环境名两边不加尖括号“&lt;&gt;”。 如：conda create --name py2 --clone python2，即为克隆名为“python2”的环境，克隆后的新环境名为“py2”。此时，环境中将同时存在“python2”和“py2”环境，且两个环境的配置相同。 删除环境1$ conda remove --name &lt;env_name&gt; --all 注意：&lt;env_name&gt;为被删除环境的名称。环境名两边不加尖括号“&lt;&gt;”。 包管理查找可供安装的包版本精确查找 1$ conda search --full name &lt;package_full_name&gt; 注意： --full-name为精确查找的参数。 &lt;package_full_name&gt;是被查找包的全名。包名两边不加尖括号“&lt;&gt;”。 例如：conda search --full-name python即查找全名为“python”的包有哪些版本可供安装。 模糊查找 1$ conda search &lt;text&gt; 注意：&lt;text&gt;是查找含有此字段的包名。此字段两边不加尖括号“&lt;&gt;”。 例如：conda search py即查找含有“py”字段的包，有哪些版本可供安装。 获取当前环境已安装的包信息1$ conda list 执行上述命令后将在终端显示当前环境已安装包的包名及其版本号。 安装包在指定环境中安装包1$ conda install --name &lt;env_name&gt; &lt;package_name&gt; 注意： &lt;env_name&gt;即将包安装的指定环境名。环境名两边不加尖括号“&lt;&gt;”。 &lt;package_name&gt;即要安装的包名。包名两边不加尖括号“&lt;&gt;”。 例如：conda install --name python2 pandas即在名为“python2”的环境中安装pandas包。 在当前环境中安装包1$ conda install &lt;package_name&gt; 注意： &lt;package_name&gt;即要安装的包名。包名两边不加尖括号“&lt;&gt;”。 执行命令后在当前环境中安装包。 例如：conda install pandas即在当前环境中安装pandas包。 使用pip安装包使用场景 当使用conda install无法进行安装时，可以使用pip进行安装。例如：see包。 命令 1$ pip install &lt;package_name&gt; 注意：&lt;package_name&gt;为指定安装包的名称。包名两边不加尖括号“&lt;&gt;”。 如：pip install see即安装see包。 注意 pip只是包管理器，无法对环境进行管理。因此如果想在指定环境中使用pip进行安装包，则需要先切换到指定环境中，再使用pip命令安装包。 pip无法更新python，因为pip并不将python视为包。 pip可以安装一些conda无法安装的包；conda也可以安装一些pip无法安装的包。因此当使用一种命令无法安装包时，可以尝试用另一种命令。 从Anaconda.org安装包使用场景 当使用conda install无法进行安装时，可以考虑从Anaconda.org中获取安装包的命令，并进行安装。 注意 从Anaconda.org安装包时，无需注册。 在当前环境中安装来自于Anaconda.org的包时，需要通过输入要安装的包在Anaconda.org中的路径作为获取途径（channel）。查询网址：Anaconda.org 卸载包卸载指定环境中的包 1$ conda remove --name &lt;env_name&gt; &lt;package_name&gt; 例如：conda remove --name python2 pandas即卸载名为“python2”中的pandas包。 卸载当前环境中的包 1$ conda remove &lt;package_name&gt; 例如：conda remove pandas即在当前环境中卸载pandas包。 更新包更新所有包 1$ conda update --all 或 1$ conda upgrade --all 建议：在安装Anaconda之后执行上述命令更新Anaconda中的所有包至最新版本，便于使用。 更新指定包 1$ conda update &lt;package_name&gt; 或 1$ conda upgrade &lt;package_name&gt; 注意： &lt;package_name&gt;为指定更新的包名。包名两边不加尖括号“&lt;&gt;”。 更新多个指定包，则包名以空格隔开，向后排列。如：conda update pandas numpy matplotlib即更新pandas、numpy、matplotlib包。]]></content>
      <categories>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo静态资源压缩]]></title>
    <url>%2F2019%2F04%2F01%2FHexo%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8E%8B%E7%BC%A9%2F</url>
    <content type="text"><![CDATA[静态资源压缩可以优化网页的访问速度、提高用户体验 安装gulp 在站点目录下 12npm install gulp -gnpm link gulp 或者1npm install gulp --save 安装gulp插件 12345npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save 创建gulpfile.js文件 在Hexo站点下创建gulpfile.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');// 压缩css文件gulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩html文件gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public/demo 目录内图片gulp.task('minify-images', function() &#123; gulp.src('./public/demo/**/*.*') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('./public/uploads'));&#125;);// 默认任务 gulp 4.0 适用的方式gulp.task('default', gulp.parallel('minify-html', 'minify-css', 'minify-js' //build the website)); 静态资源压缩 只要每次在执行hexo g命令后执行gulp就可以进行静态资源压缩，压缩后再同步到github上 123hexo ggulphexo d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo的Next主题下添加看板娘]]></title>
    <url>%2F2019%2F04%2F01%2FHexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98%2F</url>
    <content type="text"><![CDATA[感觉blog有点简洁，所以就上网找了一下Next主题下的一些装饰办法，发现了看板娘，感觉还行！ 1.下载项目我们先把项目下到主题的source目录下1git clone &quot;https://github.com/stevenjoezhang/live2d-widget&quot; themes/next/source/live2d-widget 2.修改 autoload.js 文件修改 themes/next/source/live2d-widget 下的 autoload.js文件将1const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;; 改成1const live2d_path = &quot;/live2d-widget/&quot;; 3.修改 _layout.swing 文件 在 /themes/next/layout/_layout.swing 中,新增如下内容：123&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt;&lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 4.个性化设置想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 、waifu.css文件。 参考文章https://www.jianshu.com/p/89440678ee3chttps://github.com/stevenjoezhang/live2d-widget]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建免费个人博客]]></title>
    <url>%2F2019%2F03%2F30%2FHexo-Github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言本文使用的环境： windows 10 node.js 10.15.3 npm 6.4.1 Git 2.21.0 hexo 一、本地环境搭建1. 安装Git 官网下载地址（下载速度极慢）: https://git-scm.com/downloads 阿里云镜像（推荐）： https://npm.taobao.org/mirrors/git-for-windows/ 下载完后，默认安装就行（一直点next） 2. 安装node.js 官网下载地址：https://nodejs.org/en/download/ 下载完后，也是默认安装就行（一直点next） 3. 检查环境123&gt; node -v&gt; npm -v&gt; git --version 4. 本地生成hexo在D盘创建hexo文件夹，然后鼠标点击空白处右键，选择Git Bash Here 在命令行依次输入：npm install -g hexo-cli 检查hexo版本，输入：hexo -v 初始化hexo，输入：hexo init 接着输入： 123&gt; npm install&gt; hexo g&gt; hexo s 访问本地 http:localhost:4000 二、搭建Github博客1. 创建仓库 2. 配置git个人信息（信息必须与github账户一致）12&gt; git config --global user.name &quot;your username&quot;&gt; git config --global user.email &quot;your email&quot; 3. 修改之前创建的hexo文件夹下的_config.yml文件找到Deployment模块进行修改 4. 配置ssh第一次设置时本地没有密钥，打开git bash，输入： 1ssh-keygen -t rsa -C &quot;123456789@qq.com&quot;(更换成自己的邮箱，然后一直回车即可) 公钥存储路径 5. 将Github和Hexo连接用记事本将上图路径下id_rsa.pub文件内容复制下来点击setting点击New SSH key将id_rsa.pub文件内容复制到key里，然后点击Add SSH key 6. 在本地hexo文件夹下打开git bash，输入1234&gt; ssh -T git@github.com&gt; npm install --save hexo-deployer-git&gt; hexo g&gt; hexo d 7. 访问自己github（https://littleredlie.github.io/）]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
